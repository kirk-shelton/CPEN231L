;**********************************************************************************************
; Author: John Tadrous
; Lab 4: Indexed Addressing and Pointers
; Date Created: February 19, 2024
; Last Modified: February 19, 2024
; Description: each array has 8 bit unsigned n = 100 or 0x64
; i is the index of arrays varying from 0 to (length-1)
; this program controls arrays by using pointers
; Register R1.
; Inputs: none
; Outputs: none
;**********************************************************************************************

N           EQU         100   ; maximum size of the arrays

; Defining length, pointers, and arrays
      AREA  MyData, DATA, READWRITE, ALIGN=2
           
Length      DCB         0           ; Length of arrays
PtrA        SPACE             4           ; Pointer for ArrayA
PtrB        SPACE             4           ; Pointer for ArrayB
PtrC        SPACE             4           ; Pointer for ArrayC
ArrayA      SPACE             N           ; the arrayA
ArrayB      SPACE             N           ; the arrayB
ArrayC      SPACE             N           ; the arrayC


      AREA  MyCode, CODE, READONLY, ALIGN=2
      EXPORT      __main
           

__main
      MOV         R1, #0x85   ; A two-digit BCD number representing Length
      BL          Set_Length  ; set the length of the arrays
      BL          Clear_Arrays; clear all arrays
      BL          Set_ArrayA  ; set the array A
      BL          Set_ArrayB  ; set the array B
      BL          Set_ArrayC  ; set the array C
Stop
      B           Stop

; Set_Length - sets the length of the array by getting the binary equivalent
; of the two-digit BCD number in R1 and store it in Length in the memory
; Note Length is a one byte value defined in the RAM.

; TO DO: Write the Set_Length subroutine here (BCD to DCB)

Set_Length
            
        PUSH {R0-R3, LR}
        
      LDR R0, =Length;
      MOV R2, R1; copy R1 to R2
      MOV R3, R1; copy R2 to R3
      AND R2, #0x0000000F;
        AND R3, #0x000000F0;
      LSR R3, #4;
        LSL R3, #1; 2 times the tens place
      ADD R3, R3, LSL #2;  multiplying by 10 and tens place fix
      ADD R3, R2, R3;   R2 is added to the result to obtain the total binary value representing the length of the arrays
      STRB R3, [R0]; stores the binary length into memory location to R0 (store a single byte)
     
        POP {R0-R3, LR}
      BX LR
     
; Clear_All_Arrays - initializes the N possible elements of the arrays to zeros
Clear_Arrays

      PUSH  {LR, R2, R0}
      ; clear the array A
      LDR   R0, =ArrayA       ; R0 gets the array address
      MOV   R2, #N            ; R2 gets the max array size
      BL    Reset_Array       ; Reset_Array is a subroutine that takes the base
                                    ; address of the array to be cleared in R0
                                    ; and the max number of elements N in R2 and clears the array
     
      ; clear the arrays for ArrayB and ArrayC;

      LDR R0, = ArrayB  ;
      BL Reset_Array    ;
     
      ; TO DO: use the subroutine Reset_Array to clear the other

      LDR R0,  = ArrayC ;
      BL Reset_Array   ;
     
     
      POP         {LR, R2, R0}      
      BX          LR

; Reset_Array - initializes all elements of the array to zeros
;     input: R2 <- length of the array
;     R0 <- address of the array
;*************************************************************************************
Reset_Array
      PUSH  {R0-R2, LR}             ; save the value of relevant registers
      MOV         R1, #0x00               ; zeros to clear the array
Reset_Again
      SUBS  R2, #1
      BLE         Reset_done
      STRB  R1, [R0]             ; clear the element
      ADD         R0, #1                        ; point to the next element
      B     Reset_Again ;

Reset_done
      STRB  R1, [R0]          ; clear the last element
      POP   {R0-R2, LR}             ; restore the value of pushed registers
      BX          LR

; Set_ArrayA - sets the array A
Set_ArrayA
      PUSH  {R0-R4, LR}       ; push relevant registers
      LDR         R0, =ArrayA       ; R0 points to ArrayA's first element (base address)
      MOV   R1, #0x00         ; R1 has the index - initialize it to 0
      LDR         R3, =Length       ;  Load the length of the array in R4 (two instructions)
      LDRB        R4, [R3]          

Set_ArrayA_Again
      ADD   R2, R1, #5              ; Add 5 to the current index and store the result in R2
      STRB  R2, [R0,R1]             ; ArrayA[i] <- i + 5
      ADD         R1, #1                        ; Increment the current index by 1 (R2 or R1?)
      CMP         R1, R4                        ; Compare the new index with the value of Length in R4
      BLE         Set_ArrayA_Again  ; Branch to Set_ArrayA_Again if index is less than the Length
      
      POP         {R0-R4, LR} ; restore the registers 
      BX          LR

; Set_ArrayB - sets the array B
Set_ArrayB
      PUSH  {R0-R4, LR}       ; push relevant registers
      LDR         R0, =ArrayB       ; Set R0 to point to the base address of ArrayB
      MOV   R1, #0x00         ; R1 is the current index - initialize it to 0
      LDR         R3, =Length       ; Load the length of the array in R4 (two instructions)
      LDRB        R4, [R3]          
      
Set_ArrayB_Again
      MOV         R2, R1                  ; R2 <- R1 (index)
      LSRS  R2, #1                  ; pushing the rightmost bit in the carry flag
      BCC         Even_index        ; carry clear implies an even index
      LSL         R2, R1, #1        ; Compute R2=2*current index
      STRB  R2, [R0, R1]            ; ArrayB[i] <- 2 * i, i is odd

Even_index
      ADD         R1, #1                        ; Increment the current index by 1
      CMP         R1, R4                        ; Compare the new index with the value of Length in R4 (?_
      BLE         Set_ArrayB_Again  ; Branch to Set_ArrayB_Again if the loop condition is true (?)
      
      POP         {R0-R4, LR}
      BX          LR

; Set_ArrayC - sets the array C
;*************************************************************************************
Set_ArrayC
      PUSH  {R0-R5, LR}
                                          
      ; Store the base address of arrays ArrayA, ArrayB and ArrayC
      ; in memory locations PtrA, PtrB and PtrC respectively. This step requires
      ; a number of instructions. (?)
      
      LDR   R0, =ArrayA
      LDR   R1, =PtrA
      STR   R0, [R1]

      LDR   R0, =ArrayB
      LDR   R1, =PtrB
      STR   R0, [R1]

      LDR   R0, =ArrayC
      LDR   R1, =PtrC
      STR   R0, [R1]    
            
      MOV   R1, #0x00         ; Use R1 as the current iteration index- initialize it to 0
      
Set_ArrayC_Again
      LDR         R0, =PtrA         ; Load the current element from ArrayA
      LDR         R4, [R0]          ; in R2. First fetch the pointer from PtrA in R4
      LDRB  R2, [R4]          ; then get the element in R2
      
      ADD         R4, #1                  ; Update pointer for ArrayA
      STR         R4, [R0]
      
      LDR         R0, =PtrB         ; Use the same approach as above to load the current element
      LDR         R4, [R0]    ; from ArrayB into R5 and update pointer PtrB for the next element (5 instructions)
      LDRB  R5, [R4]
      
      ADD         R4, #1                  ; Update pointer for ArrayB
      STR         R4, [R0]
      
      ADD         R2, R2, R5        ; Add the current element of ArrayB to the current element
                              ; of ArrayA and keep the result in R2
            
      LDR         R0, =PtrC         ; Use pointer PtrC to write the value in R2 into the current element of
      LDR         R4, [R0]    ; ArrayC and update PtrC for the next element (5 instructions)
      STRB  R2, [R4]

      ADD         R4, #1
      STR         R4, [R0]    
            
      LDR         R0, =Length
      LDRB  R4, [R0]
      ADD         R1, #1            ; Increment the current index by 1
      CMP   R1, R4                  ; Compare the new index with the value of Length in R4
      BLO   Set_ArrayC_Again  ; Branch to Set_ArrayC_Again if the loop condition is true
      
      
      POP         {R0-R5, LR}
      BX          LR
     
    END
