;*************************************************************************************
; Author: Kirk Shelton
; Template by: John Tadrous on 02/09/2018, Modified 02/11/2024
; Project: Lab 3
; Program: Subroutines and loops
; Date Created: September 19, 2017
;
; Description: this program will create and test subroutines and loops
; Inputs: X and N
; Outputs: none
;*************************************************************************************

            AREA    MyData, DATA, READWRITE, ALIGN=2
X           RN          R5
N           RN          R7

THUMB
      AREA MyCode, CODE, READONLY, ALIGN=2
      EXPORT __main


__main
             BL   bcd_to_bin     ; call the BCD_To_Bin
             BL   absolute_value ; Call the Absolute_value subroutine here
             BL   parity_adder   ; Call the Parity_adder
stayHere B        stayHere


      ; BCD_to_bin - converts a two-digit BCD number in R5 into its equivalent binary
      ; which is returned through R6 BCD_to_bin
      
bcd_to_bin
            PUSH {R0, X, LR}  ; PUSH registers containing important data              ; Convert Xten and Xunit from BCD to Binary
            MOV R0, X         ; copy back the value of R1
            AND X, #0xF0      ; set the LSB to zero
            LSR X, #1         ; R5 = 8 * (MSD of Number)
            ADD X, X, LSR #2  ; R5 = 8 * (MSD of Number)+ 2 * (MSD of Number)
            AND R0, #0x0F     ; R0 = (LSD of Number)
            ADD R6, X, R0     ; R1 = binary of number
            POP {R0, X, LR}
            BX LR

; Absolute_value - given a number in R7, return its absolute value in R8 Absolute_value
absolute_value
            PUSH {N, LR} ; TO DO: PUSH important registers
            MOV R8, N        ; TO DO: Copy N into R8
            CMP N, #0        ; TO DO: Check if N is a negative number (you may use CMP instruction)
            BGE next1        ; TO DO: If non-negative, skip to POPing the pushed registers and return
        NEG R8, N        ; TO DO: Else negate N and put the result in R8
next1 POP {N, LR}  ; TO DO: POP the pushed registers
            BX LR            ; TO DO: Return from subroutine

      ; Parity_adder - Loops over the numbers from 1 to 100, accumulates the odd numbers
      ; in register R9 and even numbers in register R10

parity_adder
            PUSH {R4, R5, LR} ; TO DO: 1) Push relevant registers
            MOV R9,  #0;       R9 is odd acumulator and R10 is even accumulator
            MOV R10, #0;       TO DO: 2) Initialize R9 and R10 to zero each. These are your accumulators.
            MOV R5, #1;       TO DO: 3) Initialize a register other than R9, R10 to 1 (this will be your loop index and also the current number to be considered)
loop  MOV R4, R5;       TO DO: 4) Copy that register (containing the current number) into another register (again not R9 or R10)
            LSRS R4, #1;       TO DO: 5) Shift the number one time to the right and update flags
            BCC odd;           TO DO: 6) Check the carry flag to determine the parity
            ;                          TO DO: 7) If even, add the copy of number to R10 (if even, else, +1)
            ADD R9, R5;
            B next2;            TO DO:    Else, add the copy of number to R9
odd     ADD R10,  R5;  
next2 ADD R5, #1;        TO DO: 8) Increment  the current number (loope index) by 1
            CMP R5, #100;      TO DO: 8) If incremented number is less than or equal 100 repeat from 4)
            BLS loop
        POP {R4, R5, LR}
            BX LR

      END
