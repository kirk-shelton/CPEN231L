;*************************************************************************************************
; Author: Kirk Shelton
; Project: Lab9
; Program: 16-bit Caculator
; Date Created: March 18, 2017
; Date Modified (by J. Tadrous):  April 10, 2021
;                                                 Enhanced the clearing operation.
; Description: this program will implement a calculator.
; Inputs: the keypad
; Outputs: LCD
;*************************************************************************************************



; TO DO: Read carefully all the definitions below and make sure you understand them
; you will need these definitions throughout the project

; Special characters and their positions on LCD for calculator
;*************************************************************************************************
BLANK       EQU   0x20  ; ASCII value for " "
POUND_SIGN  EQU   0x23  ; ASCII value for "#"
ASTERISK    EQU   0x2A  ; ASCII value for "*"
NULL        EQU   0x00  ; ASCII value for NULL
LetterA           EQU   0x41  ; ASCII value for A
LetterB           EQU   0x42  ; ASCII value for B
LetterC           EQU   0x43  ; ASCII value for C
LetterD           EQU   0x44  ; ASCII value for D

; Positions for the number and the result on LCD (calculator)
;*************************************************************************************************
Size_Cal                      EQU   5           ; size for result buffer
POS_Ready_Cal                 EQU   0x00  ; display position for message prompt
POS_Operand1_Cal        EQU   0x03  ; display position for the number
POS_Operand_msg_Cal           EQU   0x40  ; display position for the operand prompt message
POS_Operation_msg_Cal   EQU   0x40  ; display position for the operation message
POS_Error_msg_Cal       EQU   0x40  ; display position for the error message
POS_Result_msg_Cal            EQU   0x40  ; display position for the result message
POS_Result_Cal                EQU   0x4B  ; display position for the result value

; Constant Strings - ROM
;**************************************************************************************************
      AREA Strings, DATA, READONLY, ALIGN=2
Ready_Cal                     DCB         "<<            >>", 0;  
Add_msg_Cal                   DCB         "+", 0      ;
Sub_msg_Cal                   DCB         "-", 0      ;
Mult_msg_Cal                  DCB         "*", 0      ;
Div_msg_Cal                   DCB         "/", 0      ;
Error_msg_Cal                 DCB         "Error! Re-enter ", 0   ;
Result_msg_Cal                DCB         "Result:         ", 0   ;
Blank_line_Cal                DCB         "                ", 0;
Error_blank_Cal               DCB         "       ",0;
Operand1_msg_Cal        DCB         "Input Oprnd1..  ", 0;
Operand2_msg_Cal        DCB         "Input Oprnd2..  ",0;
Operation_msg_Cal       DCB         "Input Oprtn..   ", 0;
; Flags and Variables
;*************************************************************************************************
      AREA  MyData, DATA, READWRITE, ALIGN=2
Key_ASCII               DCD         0           ; ASCII value of the pressed key
Operand1_Cal            DCD         0           ; first operand entered from the keypad
Operand2_Cal            DCD         0           ; second operand entered from the keypad
Result_Cal              DCD         0           ; result of arithmetic operation
ErFlag_Cal              DCD         0           ; error flag
ClrFlag_Cal             DCD         0           ; clear flag
Mode_Cal                DCD         0           ; operation flag
Buffer_Number           SPACE Size_Cal+1  ; String of BCD digit from the keypad
POS_Operation_Cal DCD         0           ; last display position on line 1
POS_Operand2_Cal  DCD         0     ; display position for the second operand


; CODE
;**************************************************************************************************
      AREA  MyCode, CODE, READONLY, ALIGN=2
      IMPORT      Scan_Keypad
      IMPORT      Init_Keypad
      IMPORT      Delay1ms
      IMPORT      Set_Position
      IMPORT      Display_Msg
      IMPORT      Display_Char
      IMPORT      Init_Clock
      IMPORT      Init_LCD_Ports
      IMPORT      Init_LCD
     
      EXPORT      Key_ASCII
      EXPORT      __main

__main
      BL          Init_Hardware_Lab9            ; Clock, LCD, Delay, and Keypad
Clear
      BL          Init_Vars_Cal                 ; initializing variables and flags
      LDR         R1, =POS_Ready_Cal            ; set the message prompt
      BL          Set_Position      ;
      LDR         R0,   =Ready_Cal  ; display the message prompt
      BL    Display_Msg ;
     
Start
      BL    Get_Operand1_Cal
      LDR   R0, = ClrFlag_Cal
      LDR   R1, [R0]
      CMP   R1, #0x01
      BEQ   Clear
Re_enter
      BL    Get_Operation_Cal       ; get and display the operation
      LDR   R0, = ClrFlag_Cal
      LDR   R1, [R0]
      CMP   R1, #0x01
      BEQ   Clear
      BL    Get_Operand2_Cal        ;
      LDR   R0, = ClrFlag_Cal
      LDR   R1, [R0]
      CMP   R1, #0x01
      BEQ   Clear
      BL    Operation_Cal                 ; perform arithmetic operation
      BL    Display_Result_Cal            ; display the result
      BL    Wait_for_Clear
      B     Start      
      LTORG

; Subroutine Get_Operand1_Cal- gets the first BCD number as operand and stores its hex equivalent in Operand1_Cal
Get_Operand1_Cal
       ; TO DO: Write the subroutine here.
        PUSH            {LR, R0-R2}              ; initializing variables and flags
        LDR    R1, = POS_Operand_msg_Cal            ; prompt for the operand entry
        BL      Set_Position      ;
        LDR R0, = Operand1_msg_Cal
        BL Display_Msg
        LDR R1, = POS_Operand1_Cal;
        BL Set_Position         ; set position to display input operand
        MOV R2, #0            ; intialize a counter for i = 0
WaitForKey    
        BL Scan_Keypad
        LDR R1, =Key_ASCII  ; Read Key from keypad
        LDR R1, [R1]

        CMP R1, #POUND_SIGN
        BEQ End_Get_Operand1_Cal
        CMP R1, #0x43 ; For Key = 'C'
        BEQ Clear_Operand1_Cal
       
        CMP R2, #Size_Cal
        BGE WaitForKey
       
        CMP R1, #0x30; For KeyBCD is greater than or equal to 0
        BLT WaitForKey
        CMP R1, #0x39; For KeyBCD is less than or equal to 9
        BGT WaitForKey
       
        LDR R0, =Buffer_Number; Stroing the KeyASCII in location of Buffer+i
        STRB R1, [R0, R2]
        ADD R2, R2, #1; i = i + 1
        BL Display_Char
       
        LDRB R1, [R0]
        B    WaitForKey
       
Buffer_Loaded
        LDR R0, = Buffer_Number
        MOV R1, #0; Storing Null
        STRB R1, [R0, R2]
        B End_Get_Operand1_Cal


Clear_Operand1_Cal
        LDR R0, =Buffer_Number
        MOV R1, #0
        STRB R1, [R0, R2]
        LDR R0, =ClrFlag_Cal
        MOV R1, #0x01
        STR R1, [R0]
        B Exit

End_Get_Operand1_Cal
        LDR R0, =Buffer_Number
        BL  String_ASCII_BCD2Hex_Lib; Convert BCD to hex
        LDR R0, = Operand1_Cal;       load Operand1_Cal address
        LDR R1, [R0]
            LDR R0, = POS_Operand1_Cal;
            LDR R1, [R0]
            ADD R1, R1, R2
        LDR R0,= POS_Operation_Cal
            STR R1, [R0]
            LDR R0, = POS_Operand2_Cal
            ADD R1, #1
            STR R1, [R0] --
            
Exit
        POP         {LR, R0-R2}
        BX          LR
        LTORG
     
; Get_Operand2_Cal Subroutine- Similar to Get_Operand1_Cal
Get_Operand2_Cal
      ; TO DO: Write the subroutine here.
        PUSH            {LR, R0-R2}              ; initializing variables and flags
        LDR R1, = POS_Operand_msg_Cal            ; prompt for the operand entry
        BL  Set_Position      ;
        LDR R0, = Operand2_msg_Cal
        BL Display_Msg
        LDR R1, = POS_Operand2_Cal;
        BL Set_Position         ; set position to display input operand
        MOV R2, #0            ; intialize a counter for i = 0
WaitForKey2    
        BL Scan_Keypad
        LDR R1, =Key_ASCII  ; Read Key from keypad
        LDR R1, [R1]

        CMP R1, #POUND_SIGN
        BEQ End_Get_Operand2_Cal
        CMP R1, #0x43 ; For Key = 'C'
        BEQ Clear_Operand2_Cal
       
        CMP R2, #Size_Cal
        BGE WaitForKey2
       
        CMP R1, #0x30; For KeyBCD is greater than or equal to 0
        BLT WaitForKey2
        CMP R1, #0x39; For KeyBCD is less than or equal to 9
        BGT WaitForKey2
       
        LDR R0, =Buffer_Number; Stroing the KeyASCII in location of Buffer+i
        STRB R1, [R0, R2]
        ADD R2, R2, #1; i = i + 1
        BL Display_Char
       
        LDRB R1, [R0]
        B    WaitForKey2
       
Buffer_Loaded2
        LDR R0, = Buffer_Number
        MOV R1, #0; Storing Null
        STRB R1, [R0, R2]
        B End_Get_Operand2_Cal


Clear_Operand2_Cal
        LDR R0, =Buffer_Number
        MOV R1, #0
        STRB R1, [R0, R2]
        LDR R0, =ClrFlag_Cal
        MOV R1, #0x01
        STR R1, [R0]
        B Exit

End_Get_Operand2_Cal
        LDR  R0, =Buffer_Number
        BL   String_ASCII_BCD2Hex_Lib; Convert BCD to hex
        LDR  R0, = Operand2_Cal;       load Operand2_Cal address
        LDR  R1, [R0]
        LDR R0, = POS_Operand1_Cal;
          LDR R1, [R0]
          ADD R1, R1, R2
        LDR R0,= POS_Operation_Cal
        STR R1, [R0]
        LDR R0, = POS_Operand2_Cal
        ADD R1, #1
          STR R1, [R0]

Exit2
        POP         {LR, R0-R2}
        BX          LR
        LTORG
            
; Subroutine String_ASCII_BCD2Hex_Lib- Converts a string of BCD characters pointed to by R0
; to a hex equivalent value in R1
String_ASCII_BCD2Hex_Lib
        PUSH       {R0,R2,R3,  LR}
        MOV         R2, #0x00                                 ; initialize R2
String_ASCII_BCD2Hex_Lib_Again
        MOV         R1, #0x00                                 ; initialize R1
        LDRB  R1, [R0]                                  ; R1 <- digit in the string
        ADD         R0, #1                                          ; increment base address
        CMP         R1, #0x00
        BEQ         End_String_ASCII_BCD2Hex_Lib  ;
        SUB         R1,   #0x30                               ; convert to decimal digit
        ADD         R2, R1                                          ; R2 <-- R2 + R1
        MOV         R1, R2                                          ; R1 <-- R2
        MOV         R3, #0x00
        LDRB  R3, [R0]
        CMP         R3, #0x00                                 ; check the next digit in the string before multiplying by 10
        BEQ         End_String_ASCII_BCD2Hex_Lib  ;
        MOV         R2, #10                                         ; R2 <- 10
        MUL         R1, R2                                          ; R1=10*R1
        MOV         R2, R1                                          ; copy the result in R2
        B           String_ASCII_BCD2Hex_Lib_Again
End_String_ASCII_BCD2Hex_Lib  
        POP         {R0,R2, R3, LR}
        BX          LR


; Subroutine Hex2DecChar_Lib- Converts a hex value in R1 into an ASCII string of BCD characters in location
; pointed to by R0
Hex2DecChar_Lib
      PUSH  {R0-R5, LR}
      MOV         R2, #0x20                     ; blanking the content before writing the string the BCD digits
      MOV         R3, #Size_Cal
Blank_digit
      SUB         R3, #1
      STRB  R2, [R0, R3]                  ; writing a blank
      CMP         R3, #0x00
      BHI         Blank_digit
      STRB  R3, [R0, #Size_Cal]           ; here R3 is NULL so we simply NULL the last byte of the string
      MOV         R3, #Size_Cal
Attach_digit      
      MOV         R2, R1                              ; quotient in R2
      CMP         R2, #10
      BLO         Last_digit
      MOV         R4, #10                             ; R4 is temporarily used to hold #10
      UDIV  R1, R2, R4                    ; R1=floor(R2/10)
      MUL         R5, R1, R4
      SUB         R4, R2, R5                    ; remainder in R4
      ADD         R4, #0x30                     ; ASCII
      SUB         R3, #1
      STRB  R4, [R0, R3]                  ; store the ASCII code of BCD digit
      CMP         R3, #0x00
      BEQ         End_Hex2DecChar_Lib           ; typically this will not be executed unless we have an overflow (c.f. Lab7)
      B           Attach_digit
Last_digit                                      ; here we store the quotient as the most significant BCD digit
      ADD         R2, #0x30
      SUB         R3, #1
      STRB  R2, [R0, R3]
End_Hex2DecChar_Lib
      POP         {R0-R5, LR}
      BX          LR
     

; Subroutine Init_Vars_Cal - initializes variables and flags
Init_Vars_Cal
      PUSH  {LR, R1, R0}
      LDR         R0, =Mode_Cal
      MOV         R1, #0x00
      STR         R1, [R0]                ; clear operation flag
      LDR         R0, =Operand1_Cal
      STR         R1, [R0]                ; clear operand1
      LDR         R0, =Operand2_Cal
      STR         R1, [R0]                ; clear operand2
      LDR         R0, =Result_Cal
      STR         R1, [R0]                ; clear the result
      LDR         R0, =ErFlag_Cal
      STR         R1, [R0]                ; clear the error flag
      LDR         R0, =ClrFlag_Cal
      STR         R1, [R0]                ; clear the clear flag
      POP         {LR, R1, R0}
      BX          LR

; Get_Operation_Cal subroutine- Receives and displays the operation
Get_Operation_Cal
; TO DO: Write the subroutine here.
      PUSH {LR, R0-R1}
        
        
        BL Display_Msg
        LDR R1, =Key_ASCII  ; Read Key from keypad
        
        
        
      CMP R1, #0x41 ; For Key = 'A'
        BEQ printAdd
        
        CMP R1, #0x42 ; For Key = 'B'           
        BEQ printSub
        
        CMP R1, #0x2A ; For Key = '*'
        BEQ printMult
      
        CMP R1, #0x44 ; For Key = 'D'
        BEQ printDiv
        
        CMP R1, #0x43 ; For Key = 'C'
        BEQ opDone
        
        
printAdd
        
        LDR R0, = Add_msg_Cal
        B opModeKey
        
printSub
        
        LDR R0, = Sub_msg_Cal
        B opModeKey
        
printMult
        
        LDR R0, = Mult_msg_Cal
        B opModeKey
        
printDiv
        
        LDR R0, = Div_msg_Cal
        B opModeKey
        

opModeKey
        
        LDR R0, = Mode_Cal
        STR R1, [R0]
        BL Display_Msg
        
opDone
        
        LDR R0, = ClrFlag_Cal
        LDR R1, [R0]
        ORR R1, #1
        
        POP {LR, R0-R1}
        
        
      BX          LR

; Operation_Cal Subroutine- Carries out the specified operation
Operation_Cal
; TO DO: Write the subroutine here.
      BX          LR
     
     
; Display_Result_Cal Subroutine- Display the final outcome
Display_Result_Cal
; TO DO: Write the subroutine here.

;        LDR R1 = ErFlag_Cal
;      CMP R1, #0x01
;      ErFlagCal =1
;
;
;        LDR  R0, =Buffer_Number
;      BL   String_ASCII_BCD2Hex_Lib; Convert BCD to hex
;      LDR  R0, = Operand1_Cal;       load Operand1_Cal address
;      LDR  R1, [R0]
;      STR  R1, [R0]
;
;
;
;
;
;
;
;
;
;
     
;No.
     



      BX          LR
     
;Subroutine Wait_for_Clear- scans keypad and clears everything only when 'C' is pressed  
Wait_for_Clear
      PUSH  {LR, R1, R0}
Keep_waiting
      BL          Scan_Keypad
      LDR         R0, =Key_ASCII
      LDRB          R1, [R0]
      CMP         R1, #LetterC
      BNE         Keep_waiting
      POP         {LR, R1, R0}
      B           Clear
     
; Init_Hardware_Lab9 subroutine    
Init_Hardware_Lab9
      PUSH          {LR}
      BL          Init_Clock
      BL          Init_LCD_Ports
      BL          Init_LCD
      BL          Init_Keypad
      POP         {LR}
      BX          LR
      END
